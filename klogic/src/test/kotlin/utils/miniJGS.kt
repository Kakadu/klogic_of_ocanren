// Autogenerated file
@file:Suppress("FunctionName", "NonAsciiCharacters", "TestFunctionName")

package utils

import org.klogic.core.*
import org.klogic.utils.terms.LogicList
import org.klogic.utils.terms.LogicList.Companion.logicListOf
import org.klogic.utils.terms.Nil.nilLogicList
import org.klogic.utils.terms.plus
import utils.LogicInt.Companion.toLogic

val digitZero: Digit = 0.toLogic()
val digitOne: Digit = 1.toLogic()

typealias Digit = LogicInt
typealias OlegLogicNumber = LogicList<Digit>
typealias OlegTerm = Term<OlegLogicNumber>

val zero: OlegLogicNumber = logicListOf()
val one: OlegLogicNumber = logicListOf( 1.toLogic() )
val three: OlegLogicNumber = logicListOf( 1.toLogic(), 1.toLogic() )

fun UInt.toOlegLogicNumber(): OlegLogicNumber = toLogicList()
fun UInt.toLogicList(): LogicList<Digit> =
    when {
        this == 0u -> nilLogicList()
        this % 2u == 0u -> digitZero + (this / 2u).toLogicList()
        else -> digitOne + (this / 2u).toLogicList()
    }

fun  pause(f: () -> Goal): Goal = { st -> ThunkStream { f()(st) } }

// There are 3 relations
fun conso1(xs: OlegTerm): Goal =
freshTypedVars { h: Term<LogicInt>, tl: OlegTerm ->
(xs `===` OCanren.Std.List.cons(h, tl)) }
fun nilo1(xs: OlegTerm): Goal =
xs `===` nilLogicList()
// CT 
interface {
// decl_by_id
// get_superclass
// object_t
// cloneable_t
// serializable_t
// new_var
}
// Put epilogue here 
